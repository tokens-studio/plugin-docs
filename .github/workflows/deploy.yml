name: Publish docker image

on:
  push:
    branches: [ master]

jobs:
  analysis:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      # note that we do not want to checkout submodules here
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_URL }}
          role: sonarqube
          method: jwt
          namespace: admin
          secrets: |
            secret/data/cicd/sonarqube/global  SONAR_TOKEN |SONAR_TOKEN ;
            secret/data/cicd/sonarqube/global  SONAR_HOST_URL | SONAR_HOST_URL;
      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN:  ${{ steps.secrets.outputs.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ steps.secrets.outputs.SONAR_HOST_URL }}


  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3 

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN  }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        tags: |
          type=sha,format=long
        images: |
          ghcr.io/tokens-studio/plugin-docs

    - name: Publish Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
  deploy:
    runs-on: ubuntu-latest
    needs:
      - "build"
    steps: 
      - uses: actions/checkout@v4
      - name: üçç Deploy with Gimlet
        uses: gimlet-io/gimlet-artifact-shipper-action@v0.8.3
        env:
              GIMLET_SERVER: ${{ secrets.GIMLET_SERVER }}
              GIMLET_TOKEN: ${{ secrets.GIMLET_TOKEN }}
        with:
          ENV: "prod"
          APP: "plugin-docs"
          DEPLOY: "true"